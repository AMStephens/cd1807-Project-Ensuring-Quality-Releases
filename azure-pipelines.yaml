name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: myAgentPool

variables:
  python.version: '3.8.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'FixedConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'Aices_New_Environment'
  #system.debug: true
  
stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Alices_Resource_Group'
        backendAzureRmStorageAccountName: 'tfstate247112767'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
    #     sshPublicKey: 'PUBLIC_KEY'            # variable value
    #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
    # - task: DownloadSecureFile@1
    #  name: udacity_public_key
    #  displayName: 
    #  inputs:
    #   secureFile: 

    
    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#--------------------------------------------#    
    # Postman - Install Newman    
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    # Postman Regression Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        # script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        script: 'newman run StarterAPIs.json -e StarterAPIs.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman Data Validation Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        # script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        script: 'newman run StarterAPIsDV.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        mergeTestResults: true
        #testRunTitle: 

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        # rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/FakeRestAPI2'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
        #archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-FakeRestAPI2.zip
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
    #- publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-FakeRestAPI2.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package'
      artifact: drop-perftests
      
     #--------------------------------------------#  
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: 'drop-fakerestapi'
        path: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)'

    - script: |
        unzip -l $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
        #unzip -l $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-FakeRestAPI2.zip
      displayName: 'View Contents of fakerestapi2.zip'
      
       #--------------------------------------------#  
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: 'drop-uitests'
        path: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)'

    - script: |
        unzip -l $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip
      displayName: 'View Contents of uitests.zip'

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  - deployment: FakeRestAPI
    #pool: myAgentPool
      #vmImage: 'ubuntu-latest'      
    environment: 'Alices_New_Environment'
    strategy:
      runOnce:
        deploy:
          steps:
          #- task: AzureWebApp@1
          - task: AzureRMWebAppDeployment@4
            displayName: 'Deploy Azure Web App'
            inputs:
              ConnectionType: "AzureRM"
              azureSubscription: 'FixedConnection'
              #appName: 'WebAppAlice12345'
              WebappName: 'WebAppAlice12345'
              appType: webApp
              resourceGroupName: 'Alices_Project_Group'
              appLocation: 'West Europe'
              packageForLinux: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip    # ToDo: Use the published zip artifact.
              deploymentMethod: zipDeploy
              timeoutInMinutes: 12
          #--------------------------------------------#    
          # Run JMeter test suite against the App Service
          - task: CmdLine@2
            inputs:
              script: |
                #wget "https://apache.mirrors.lucidnetworks.net//jmeter/binaries/apache-jmeter-5.2.1.tgz"
                wget "https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.5.tgz"
                tar -xf apache-jmeter-5.5.tgz
                unzip -o $(Build.BuildId)-perftests.zip

                # Remove existing log and JTL files
                rm -f stress.log
                rm -f endurance.log
                rm -f stress_results.jtl
                rm -f endurance_results.jtl

                # Delete existing report folders
                rm -rf stress_report
                rm -rf endurance_report
      
                #./apache-jmeter-5.5/bin/jmeter -n -t Starter.jmx -j jmeter.log -f
                #cat jmeter.log                                                                           # ToDo: Write your commands
                
                # Run Stress Test
                ./apache-jmeter-5.5/bin/jmeter -n -t StressTest.jmx -JcsvFile=people-100.csv -l stress_results.jtl -j stress.log -e -o stress_report
      
                # Run Endurance Test
                ./apache-jmeter-5.5/bin/jmeter -n -t EnduranceTest.jmx -JcsvFile=people-100.csv -l endurance_results.jtl -j endurance.log -e -o endurance_report
      
                # Display logs and results
                cat stress.log
                cat endurance.log
                cat stress_results.jtl
                cat endurance_results.jtl                
              workingDirectory: $(Pipeline.Workspace)/drop-perftests            # ToDo: Use the artifact name from the task above
              
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Stress Test Report Artifact'
            inputs:
              PathtoPublish: '$(Pipeline.Workspace)/drop-perftests/stress_report'
              ArtifactName: 'StressTestReport'
              publishLocation: 'Container'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Endurance Test Report Artifact'
            inputs:
              PathtoPublish: '$(Pipeline.Workspace)/drop-perftests/endurance_report'
              ArtifactName: 'EnduranceTestReport'
              publishLocation: 'Container'
              
  #--------------------------------------------# 
  # DEPLOYMENT STAGE
  #--------------------------------------------#    
- stage: Selenium
  jobs:
  #--------------------------------------------#  
  # Selenium | Functional UI Tests
  # ToDo: 
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name: 'Alices_New_Environment'       # ToDo: Change/provide a name
      resourceType: VirtualMachine
      #tags: selenium
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: 'drop-uitests'     # ToDo: Change/provide a name
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |           
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                cd ~/
                DIR=/home/christian/app
                if [ ! -d "$DIR" ]; then
                  mkdir app
                fi
                mv /home/christian/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
                cd app
                unzip -o $(Build.BuildId)-uitests.zip -d .
                  FILE=/home/christian/app/chromedriver_linux64.zip
                  if [ ! -f "$FILE" ]; then
                      LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
                      wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
                      unzip -o chromedriver_linux64.zip
                      sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
                  fi
                  export PATH=$PATH:/home/christian/app
                  echo "Starting Selenium Tests"
                  #python3 add_remove_from_cart.py >> selenium.log
                  #python3 login.py >> selenium.log
                  python3 login.py >> /home/christian/app/selenium.log
                  echo "Completed Selenium Tests. Check selenium.log for results."
                  timestamp=$(date +"%Y%m%d%H%M%S")
                  mv /home/christian/app/selenium.log /home/christian/app/selenium${timestamp}.log
                  # Create a temporary UTF-8 encoded file
                  temp_filename="/home/christian/app/selenium${timestamp}.utf8.log"
                  # Convert the log file to UTF-8 encoding using Python
                  python3 -c "with open('/home/christian/app/selenium${timestamp}.log', 'r', encoding='ascii') as f:
                                content = f.read()
                                with open('$temp_filename', 'w', encoding='utf-8') as f:
                                  f.write(content)"
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                echo "Displaying selenium.log"
                cat /home/christian/app/selenium*.utf8.log
